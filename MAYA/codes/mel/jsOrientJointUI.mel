//------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------//
//	SCRIPT:	jsOrientJointUI.mel
//	AUTHOR:	Jason Schleifer
//			oy_vay@hotmail.com
//	DATE:		July 12, 2001
//
//	DESCRIPTION:	This script can be used to change the orientation of selected
//			joints.  It allows the user to align them so their Y axis is facing
//			down the joint, and the Z is facing either UP or DOWN.
//
//
//	UPDATES:
//
//		Jan 12, 2004
//			o Added ability to choose aim axis (X,Y,Z)
//			o Added ability to choose up axis (X,Y,Z)
//			o Added storing of these values with optionVars
//	
//		Feb 4, 2004
//			o Added buttons for turning on and off the local axis
//			
//------------------------------------------------------------------------------------------------------------//	
//------------------------------------------------------------------------------------------------------------//


//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsOrientJointUI
//	
//		This is the main procedure for jsOrientJointUI. 
//------------------------------------------------------------------------------------------------------------//

global proc jsOrientJointUI ()
{

	// Create a window which will allow the user to choose between Z-up and Z-down
	string $win = "jsOrientJointWindow";

	// check and see if the window exists.  if it does, then delete it.
	if (`window -exists $win`)
		deleteUI $win;

	// create the window
	jsCreateOrientJointWindow $win;

	// make the callbacks
	jsCreateOrientJointWindowCB;

	// show the window
	showWindow $win;
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCreateOrientJointWindow
//
//		This procedure creates the joint orient window.
//	
//	IN:	string $win - the name of the window that's getting created.
//------------------------------------------------------------------------------------------------------------//

global proc jsCreateOrientJointWindow ( string $win )
{
	// define the window;
	window 
		-title "Orient Joint Window"
		$win;

	$f = `formLayout -nd 100`;

	// create a radio button for the aim axis
	radioButtonGrp -numberOfRadioButtons 3
			-label "Aim Axis" 
			-labelArray3 "+X" "+Y" "+Z" 
			-cw 1 100
			-cw 2 50
			-cw 3 50
			-cw 4 50 
			jsAimRadioButton; 
	$r = `radioButtonGrp -numberOfRadioButtons 3 
			-shareCollection jsAimRadioButton
        	-label "" 
			-labelArray3 "-X" "-Y" "-Z"
			-cw 1 100
			-cw 2 50
			-cw 3 50
			-cw 4 50
			jsAimRadioButtonNeg`; 
	
	radioButtonGrp -numberOfRadioButtons 3
			-cw 1 100
			-cw 2 50
			-cw 3 50
			-cw 4 50 
			-label "Up Axis" 
			-labelArray3 "+X" "+Y" "+Z" 
			jsUpRadioButton; 
	
	$r2 = `radioButtonGrp -numberOfRadioButtons 3 
			-shareCollection jsUpRadioButton
        	-label "" 
			-labelArray3 "-X" "-Y" "-Z"
			-cw 1 100
			-cw 2 50
			-cw 3 50
			-cw 4 50
			jsDownRadioButton`; 
	
	// create the axis on/off buttons
	$t = `text -w 100 -l "Display Rot Axis"`;
	$b1 = `button -l "On" -w 60 jsAxisOnB`;
	$b2 = `button -l "Off" -w 60 jsAxisOffB`;

	// create the button
	button -l "Orient" jsOrientButton;

	formLayout -e
		-af jsAimRadioButton top 0
		-af jsAimRadioButton left 0
		-af jsAimRadioButton right 0
		
		-af $r left 0
		-af $r right 0
		-ac $r top 0 jsAimRadioButton

		-af jsUpRadioButton left 0
		-af jsUpRadioButton right 0
		-ac jsUpRadioButton top 5 $r
		
		-af $r2 left 0
		-af $r2 right 0
		-ac $r2 top 0 jsUpRadioButton

		-af $t left 0
		-ac $t top 5 $r2

		-ac $b1 left 0 $t
		-ac $b1 top 5 $r2
		
		-ac $b2 left 20 $b1
		-ac $b2 top 5 $r2

		-af jsOrientButton left 0
		-af jsOrientButton right 0
		-af jsOrientButton bottom 0

		$f;

}

//-------------------------------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCreateOrientJointWindowCB
//
//		This procedure the callbacks for the buttons.
//	
//-------------------------------------------------------------------------------------------------------------------------------------//

global proc jsCreateOrientJointWindowCB ()
{
	// first find out what the aim value is
	$aimOptionVar = "jsOrientJointAimOptionVar";
	string $aimString = `optionVar -q $aimOptionVar`;
	if ($aimString == 0)
		$aimString = "+Y";
	
	$upOptionVar = "jsOrientJointUpOptionVar";
	string $upString = `optionVar -q $upOptionVar`;
	if ($upString == 0)
		$upString = "+Z";
	
	// select correct item based on what's chosen as the optionVar
	jsChooseCorrectRadioButton $aimString jsAimRadioButton jsAimRadioButtonNeg;
	jsChooseCorrectRadioButton $upString jsUpRadioButton jsDownRadioButton;

	// define the command first.  
	string $cmd = "jsPrepareOrientJoint ";

	button -e -c ($cmd ) jsOrientButton;

	// define callback for the displayAxis buttons
	button -e -c ("jsDisplayAxisOnOff 1") jsAxisOnB;
	button -e -c ("jsDisplayAxisOnOff 0") jsAxisOffB;
	
}

global proc jsDisplayAxisOnOff (int $value)
{
	string $objs[0];
	$objs = `ls -sl -type joint`;
	for ($ob in $objs)
	{
		setAttr ($ob + ".displayLocalAxis") $value;
	}
}
global proc jsChooseCorrectRadioButton (string $aimString, string $firstRBG, string $secondRBG)
{
	int $sel = 1;
	string $rbg = $firstRBG;
	print ("AimString: " + $aimString + "\n");
	switch ($aimString)
	{
		case "+X":
			$sel = 1;
			$rbg = $firstRBG;
			break;
		case "+Y":
			$sel = 2;
			$rbg = $firstRBG;
			break;
		case "+Z":
			$sel = 3;
			$rbg = $firstRBG;
			break;
		case "-X":
			$sel = 1;
			$rbg = $secondRBG;
			break;
		case "-Y":
			$sel = 2;
			$rbg = $secondRBG;
			break;
		case "-Z":
			$sel = 3;
			$rbg = $secondRBG;
			break;
	}
	$cmd = ("radioButtonGrp -e -sl " + $sel+ " \""+ $rbg+ "\"");
	eval $cmd;
}
//-------------------------------------------------------------------------------------------------------------------------------------//
//	PROC:	jsPrepareOrientJoint
//
//		This procedure prepares to orient the joints based on the given aim axis, up axis, and direction
//
//	
//-------------------------------------------------------------------------------------------------------------------------------------//

global proc jsPrepareOrientJoint ( )
{
	// First get the current value of the aimAxis
	int $upAxis[3];
	int $aimAxis[3];

	$upAxis = `jsGetCorrectRadioButton jsAimRadioButton jsAimRadioButtonNeg`;
	$aimAxis = `jsGetCorrectRadioButton jsUpRadioButton jsDownRadioButton`;
	
	// save the value for the optionVars
	jsSaveJointOrient jsOrientJointAimOptionVar $upAxis;
	jsSaveJointOrient jsOrientJointUpOptionVar $aimAxis;
	jsOrientJoint $upAxis $aimAxis;
}

global proc jsSaveJointOrient (string $optionVar, int $axis[])
{
	string $value = "";
	// save the optionvar
	if ($axis[0] == 1)
		$value = "+X";	
	if ($axis[0] == -1)
		$value = "-X";
	if ($axis[1] == 1)
		$value = "+Y";
	if ($axis[1] == -1)
		$value = "-Y";
	if ($axis[2] == 1)
		$value = "+Z";
	if ($axis[2] == -1)
		$value = "-Z";
	
	optionVar -sv $optionVar $value;
	
}
global proc int[] jsGetCorrectRadioButton (string $rbg1, string $rbg2)
{
	int $return[3];
	string $pre = "";

	int $sel = `radioButtonGrp -q -sl $rbg1`;

	if ($sel == 0)
	{
		$pre = "-";
		$sel = `radioButtonGrp -q -sl $rbg2`;
	}
	
	if ($sel == 1)
	{
		$return = { (int(string($pre + "1"))), 0, 0 };
	}
	else if ($sel == 2)
	{
		$return = { 0,(int(string($pre + "1"))), 0 };

	}
	else
	{
		$return = { 0,0,(int(string($pre + "1"))) };

	}
	return $return;
}
//-------------------------------------------------------------------------------------------------------------------------------------//
//	PROC:	jsOrientJoint
//
//		This procedure orients the joints based on the given inputs upAxis and aimAxis
//
//	IN:	int[] $aimAxis
//		int[] $upAxis
//	
//-------------------------------------------------------------------------------------------------------------------------------------//
global proc jsOrientJoint ( int $aimAxis[], int $upAxis[])
{
	// Define Variables
	string $joints[0];		// these will be all the selected joints
	string $joint;
	
	// get all the joints which are selected
	$joints = `ls -sl -type joint`;

	// check and see if there are any joints selected.  If not, error out.
	if (size($joints) == 0)
		error ("You have no joints selected.\n");
		

	// create a progress window to show how long it's going to take
	int $amount = 0;

	progressWindow
		-title "Aligning Selected Joints"
		-progress $amount
		-status "Aligning Joint: "
		-isInterruptable true;

	$size = `size ($joints)`;
	int $count = 1;
	// now we know that there are joints selected. Now, we step through each of the joints and perform a series of operations
	// that will align the joint properly.
	
	for ($joint in $joints)
	{
		// check and see if the dialog has been cancelled
		if ( `progressWindow -query -isCancelled`) break;
		
		$percent = ($count/$size);
		$amount = $percent * 100;
		$count++;
		progressWindow -edit
			-progress $amount
			-status ("Aligning Joint: " + $joint);
		
		// first get a list of all the children of the joint
		string $children[0];

		$children = `listRelatives -f -c $joint`;  // this lists all the children of the joint, and their full paths.
		
		// make sure they have children first!
		if (size ($children) > 0)
		{
			//  we need to perform the following acts on the children:
			//	unlock the translation/rotation attributes
			//	find out which one is the first joint (that's the one we'll orient towards)
			//	unparent the children while the joint is being oriented
			//	re-parent the children after the joint is oriented
			//	re-lock all the attributes that were locked before

			string $child;
			int $firstJoint = 0;
			for ($child in $children)
			{
				// find out if $child is a joint and if it's the first one.
				// if it is, make a connection to $joint
				if ((`nodeType $child` == "joint") && ($firstJoint == 0))
				{
					addAttr -ln "jsTmpFirstJoint" -at message $joint;
					connectAttr ($child + ".message") ($joint + ".jsTmpFirstJoint");

					$firstJoint = 1;
				}
				// add an "jsTmpAttrLocked" attribute to $child.  This will be used to store which attributes were locked 
				if (!`attributeQuery -exists -node $child "jsTmpAttrLocked"`)
					addAttr -ln "jsTmpAttrLocked" -dt "string" $child;

				// now for each of the attributes, see if it's locked.  If it is, unlock it and store it in jsTmpAttrLocked.
				string $attrs[] = {"t", "tx", "ty", "tz", "r", "rx", "ry", "rz"};
				string $at;
				string $lockedAttrs = "";
			
				for ($at in $attrs)
				{
					if (`getAttr -l ($child + "." + $at)`)
					{
						// if the attribute is locked, unlock it
						setAttr -l 0 ($child + "." + $at);
					
						// store that value in $lockedAttrs
						$lockedAttrs = ($lockedAttrs + " " + $at);
					}
				}
			
				// we now have a list of locked attrs, and the children are unlocked.
				// store those values on jsTmpAttrLocked
				//print ("setAttr " + $child + ".jsTmpAttrLocked " + $lockedAttrs + "\n");
				setAttr -type "string" ($child + ".jsTmpAttrLocked") $lockedAttrs;
			
			
			}
			// unparent the children, but store their names
			string $unparentedChildren[0];

			select $children;
			parent -w $children;
			
			$unparentedChildren = `ls -sl`;
		
			// now it's time to orient the joint towards the first joint
			string $con[] = `listConnections ($joint + ".jsTmpFirstJoint")`;
			string $aimJoint = $con[0];

			// first set the rotations and joint orients to 0 0 0
			setAttr -l 0 ($joint + ".r");
			setAttr -l 0 ($joint + ".rx");
			setAttr -l 0 ($joint + ".ry");
			setAttr -l 0 ($joint + ".rz");

			setAttr ($joint + ".r") 0 0 0;
			setAttr ($joint + ".jo") 0 0 0;

			// now create a locator which will go either above or below the joint depending on what direction we chose
			$pos = `xform -q -ws -rp $joint`;
		
			$loc = `spaceLocator`;
		
			$tx = $pos[0];
			$ty = $pos[1];
			$tz = $pos[2];
			$direction = 1;
			if ($direction == 1)
				$ty = $ty + 5;
			else
				$ty = $ty-5;

			// move the locator either above or below the joint
			move -a -ws $tx $ty $tz $loc[0];

			// now let's create an aimConstraint which aims at $aimJoint and uses $loc[0] as the up vector
			select $aimJoint $joint;

			$const = `aimConstraint -wut "object" -aim $aimAxis[0] $aimAxis[1] $aimAxis[2] -u $upAxis[0] $upAxis[1] $upAxis[2] -wuo $loc[0]`;

			// now that the constraint is made, we can delete the constraint and the $loc
			delete $const $loc[0];

			// find the rotations on the joint and put them into the joint orients
			$r = `getAttr ($joint + ".r")`;
		
			setAttr ($joint + ".jo") $r[0] $r[1] $r[2];

			// set the rotations back to 0 0 0
			setAttr ($joint + ".r") 0 0 0;

			// parent all the children back
			select $unparentedChildren;

			parent $unparentedChildren $joint;
			$children = `ls -sl`;
			// for each child, re-lock the attributes which are supposed to be locked
			for ($child in $children)
			{
				string $attrsToLock = `getAttr ($child + ".jsTmpAttrLocked")`;
				string $breakApart[0];

				// tokenize $attrsToLock to find all the attributes
				tokenize ($attrsToLock, " ", $breakApart);

				for ($at in $breakApart)
				{
					if (`attributeQuery -exists -node $child $at`)
					{
						setAttr -l 1 ($child + "." + $at);
						//print ("setAttr -l 1 " + $child + "." + $at + "\n");
					}
				}
				if (`attributeQuery -exists -node $child "jsTmpAttrLocked"`)
					deleteAttr -at "jsTmpAttrLocked" $child;

			}
	
			// break the connection between .jsTmpFirstJoint and the first joint
			$con = `listConnections ($joint + ".jsTmpFirstJoint")`;
			disconnectAttr ($con[0] + ".message") ($joint + ".jsTmpFirstJoint");

			// delete the extra attributes
			if (`attributeQuery -exists -node $joint "jsTmpFirstJoint"`)
				deleteAttr -at "jsTmpFirstJoint" $joint;
		}		

	}
	progressWindow -endProgress;		
	select $joints;
}
