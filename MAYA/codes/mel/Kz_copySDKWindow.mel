/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: Kz_copySetDrivenKey 1.0.0
''    Author: shigekazu58 
''    Last Updated: Nov 19, 2006
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/animation/929.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
//--------------------------------------------------------------------------------------------------//
// Kz_copySetDrivenKey - MEL Script File
//--------------------------------------------------------------------------------------------------//
//
// VERSION: 1.0.0
//
// AUTHOR: Kazuki Shigeta
//
// USAGE: source "Kz_copySDKWindow.mel"; Kz_copySDKWindow();
//
//
// PROCEDURES:
//  Kz_checkUnitConversion
//  Kz_copySDK_targetDriverName
//  Kz_copySDK_reversDriven
//  Kz_copySDK
//  Kz_copySDK_getSelList
//  Kz_copySDK_Run
//  Kz_copySDK_copyMode
//  Kz_copySDKWindow
//
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
proc string Kz_checkUnitConversion ( string $target , string $buffer , string $connection )
{
string $unitConversion[] ;
string $nodeType = `nodeType $connection` ;
if ($nodeType == "unitConversion"){
	$unitConversion = `duplicate -name ($target + "_" + $buffer + "_unitConversion") $connection` ;
	connectAttr -force ($unitConversion[0] + ".output") ($target + "." + $buffer) ;
	return ($unitConversion[0] + ".input") ;
}
else { return ($target + "." + $buffer) ; }
}
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
proc string Kz_copySDK_targetDriverName (string $targetDriver, string $search, string $replace, string $prefix)
{
string $replaceName = $targetDriver ;
if ($search != "" && $replace != "") { $replaceName = `substitute $search $replaceName $replace` ; }
if ($prefix != "")    { $replaceName = ($prefix + $replaceName) ; }
if (`objExists $replaceName`)  { return $replaceName ; }
else      { return $targetDriver ; }
}
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
proc Kz_copySDK_reversDriven (string $curve, string $attr, string $output)
{
int $TTX = `checkBox -q -v Kz_copySDKCB_TimeTX` ; int $VTX = `checkBox -q -v Kz_copySDKCB_ValuTX` ;
int $TTY = `checkBox -q -v Kz_copySDKCB_TimeTY` ; int $VTY = `checkBox -q -v Kz_copySDKCB_ValuTY` ;
int $TTZ = `checkBox -q -v Kz_copySDKCB_TimeTZ` ; int $VTZ = `checkBox -q -v Kz_copySDKCB_ValuTZ` ;
int $TRX = `checkBox -q -v Kz_copySDKCB_TimeRX` ; int $VRX = `checkBox -q -v Kz_copySDKCB_ValuRX` ;
int $TRY = `checkBox -q -v Kz_copySDKCB_TimeRY` ; int $VRY = `checkBox -q -v Kz_copySDKCB_ValuRY` ;
int $TRZ = `checkBox -q -v Kz_copySDKCB_TimeRZ` ; int $VRZ = `checkBox -q -v Kz_copySDKCB_ValuRZ` ;
if($TTX==1 && $output=="translateX"){ scaleKey -t ":" -f ":" -ts -1 -tp 0 -fs -1 -fp 0 -vs 1 -vp 0 -hi none $curve ;}
if($TTY==1 && $output=="translateY"){ scaleKey -t ":" -f ":" -ts -1 -tp 0 -fs -1 -fp 0 -vs 1 -vp 0 -hi none $curve ;}
if($TTZ==1 && $output=="translateZ"){ scaleKey -t ":" -f ":" -ts -1 -tp 0 -fs -1 -fp 0 -vs 1 -vp 0 -hi none $curve ;}
if($VTX==1 && $attr=="translateX")  { scaleKey -t ":" -f ":" -ts  1 -tp 0 -fs 1 -fp 0 -vs -1 -vp 0 -hi none $curve ;}
if($VTY==1 && $attr=="translateY")  { scaleKey -t ":" -f ":" -ts  1 -tp 0 -fs 1 -fp 0 -vs -1 -vp 0 -hi none $curve ;}
if($VTZ==1 && $attr=="translateZ")  { scaleKey -t ":" -f ":" -ts  1 -tp 0 -fs 1 -fp 0 -vs -1 -vp 0 -hi none $curve ;}
if($TRX==1 && $output=="rotateX"){ scaleKey -t ":" -f ":" -ts -1 -tp 0 -fs -1 -fp 0 -vs 1 -vp 0 -hi none $curve ;}
if($TRY==1 && $output=="rotateY"){ scaleKey -t ":" -f ":" -ts -1 -tp 0 -fs -1 -fp 0 -vs 1 -vp 0 -hi none $curve ;}
if($TRZ==1 && $output=="rotateZ"){ scaleKey -t ":" -f ":" -ts -1 -tp 0 -fs -1 -fp 0 -vs 1 -vp 0 -hi none $curve ;}
if($VRX==1 && $attr=="rotateX")  { scaleKey -t ":" -f ":" -ts  1 -tp 0 -fs 1 -fp 0 -vs -1 -vp 0 -hi none $curve ;}
if($VRY==1 && $attr=="rotateY")  { scaleKey -t ":" -f ":" -ts  1 -tp 0 -fs 1 -fp 0 -vs -1 -vp 0 -hi none $curve ;}
if($VRZ==1 && $attr=="rotateZ")  { scaleKey -t ":" -f ":" -ts  1 -tp 0 -fs 1 -fp 0 -vs -1 -vp 0 -hi none $curve ;}
}
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
global proc Kz_copySDK(string $source, string $target)
{
string $drivenAttrList[] = `setDrivenKeyframe -q -dn $source` ;
string $search  = `textField -q -tx Kz_copySDKSearchTTF ` ;
string $replace = `textField -q -tx Kz_copySDKReplaceTTF ` ;
string $prefix  = `textField -q -tx Kz_copySDKPrefixTTF ` ;
string $connectionList1[] ;
string $connectionList2[] ;
string $connectionList3[] ;
string $driverList[] ;
string $newAnimCurve[] ;
string $blendWeighted[] ;
string $unitConversion[] ;
string $buffer[] ;
string $targetDriver ;
string $nodeType ;
string $input ;
string $output[] ;
int $i ;
for($drivenAttr in $drivenAttrList){
	$connectionList1 = `listConnections $drivenAttr` ;
	tokenize ($drivenAttr, ".", $buffer) ;
	$input = Kz_checkUnitConversion ( $target , $buffer[1] , $connectionList1[0]) ;
	if($input != ($target + "." + $buffer[1])) { $connectionList1 = `listConnections ($connectionList1[0] + ".input")` ; }
	$nodeType = `nodeType $connectionList1[0]` ;
	if($nodeType == "blendWeighted"){
		$blendWeighted = `duplicate -name ($target + "_" + $buffer[1] + "_blendWeighted") $connectionList1[0]` ;
		connectAttr -force ($blendWeighted[0] + ".output") $input ;
		$connectionList2 = `listConnections ($connectionList1[0] + ".input")` ;
		$i = 0 ;
		for($connection in $connectionList2){
			$input = Kz_checkUnitConversion ( $blendWeighted[0] , ("input[" + $i + "]") , $connection) ;
			if($input != ($blendWeighted[0] + ".input[" + $i + "]")) { $connectionList3 = `listConnections ($connection + ".input")` ; }
			else { $connectionList3[0] = $connection ; }
			$newAnimCurve = `duplicate -name ($target + "_" + $buffer[1]) $connectionList3[0]` ;
			connectAttr -force ($newAnimCurve[0] + ".output") $input ;
			$driverList = `listConnections ($connectionList3[0] + ".input")` ;
			$input = Kz_checkUnitConversion ( $newAnimCurve[0] , "input" , $driverList[0]) ;
			if($input == ($newAnimCurve[0] + ".input")) { $driverList = `listConnections -p 1 ($connectionList3[0] + ".input")` ; }
			else { $driverList = `listConnections -p 1 ($driverList[0] + ".input")` ; }
			$targetDriver = Kz_copySDK_targetDriverName ($driverList[0], $search, $replace, $prefix ) ;
			tokenize ($targetDriver, ".", $output) ;
			Kz_copySDK_reversDriven ($newAnimCurve[0], $buffer[1], $output[1]) ;
			connectAttr -force $targetDriver $input ;
			$i++ ;
		}
	}
	else {
		$newAnimCurve = `duplicate -name ($target + "_" + $buffer[1]) $connectionList1[0]` ;
		connectAttr -force ($newAnimCurve[0] + ".output") $input;
		$driverList = `listConnections ($connectionList1[0] + ".input")` ;
		$input = Kz_checkUnitConversion ( $newAnimCurve[0] , "input" , $driverList[0]) ;
		if($input == ($newAnimCurve[0] + ".input")) { $driverList = `listConnections -p 1 ($connectionList1[0] + ".input")` ; }
		else { $driverList = `listConnections -p 1 ($driverList[0] + ".input")` ; }
		$targetDriver = Kz_copySDK_targetDriverName ($driverList[0], $search, $replace, $prefix ) ;
		tokenize ($targetDriver, ".", $output) ;
		Kz_copySDK_reversDriven ($newAnimCurve[0], $buffer[1], $output[1]) ;
		connectAttr -force $targetDriver $input ;
	} 
}
}
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
global proc Kz_copySDK_getSelList()
{
string $selectList[] = `ls -sl` ;
string $scrollList[] = `textScrollList -q -ai Kz_copySDK_textScrollList_from` ;
string $targetName ;
string $search  = `textField -q -tx Kz_copySDKSearchVTF ` ;
string $replace = `textField -q -tx Kz_copySDKReplaceVTF ` ;
string $prefix  = `textField -q -tx Kz_copySDKPrefixVTF ` ;
string $number ;
int $i ;
if(size($scrollList)!=0) { textScrollList -edit -removeAll Kz_copySDK_textScrollList_from ; }
$scrollList = `textScrollList -q -ai Kz_copySDK_textScrollList_to` ;
if(size($scrollList)!=0) { textScrollList -edit -removeAll Kz_copySDK_textScrollList_to ; }
if(`rowColumnLayout -q -vis Kz_copySDK_TargetDrivenNameCL`==0){
	if(size($selectList)!=0) { textScrollList -edit -append $selectList[0] Kz_copySDK_textScrollList_from ; }
	if(size($selectList)>=2) {
		for($i=1 ; $i<size($selectList) ; $i++){
		textScrollList -edit -append $selectList[$i] Kz_copySDK_textScrollList_to ; 
	}
	textScrollList -e -w 206 Kz_copySDK_textScrollList_from ;
	textScrollList -e -w 206 Kz_copySDK_textScrollList_to ;
	}
}
else {
	if(size($selectList)!=0) {
		for($i=0 ; $i<size($selectList) ; $i++){
			if($i<9){$number=("00"+($i+1));}
			else if($i<99){$number=("0"+($i+1));}
			else {$number=($i+1);}
			textScrollList -edit -append ($number+"  "+$selectList[$i]) Kz_copySDK_textScrollList_from ; 
			$targetName = Kz_copySDK_targetDriverName ($selectList[$i], $search, $replace, $prefix ) ;
			if($selectList[$i]==$targetName){textScrollList -edit -append ($number+"  <none>") Kz_copySDK_textScrollList_to;}
			else { textScrollList -edit -append ($number+"  "+$targetName) Kz_copySDK_textScrollList_to ; }
		}
		textScrollList -e -w 206 Kz_copySDK_textScrollList_from ;
		textScrollList -e -w 206 Kz_copySDK_textScrollList_to ;
	}
}
}
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
global proc Kz_copySDK_Run()
{
int $mode = `rowColumnLayout -q -vis Kz_copySDK_TargetDrivenNameCL` ;
int $i ;
string $selList[] = `ls -sl` ;
string $search  = `textField -q -tx Kz_copySDKSearchVTF ` ;
string $replace = `textField -q -tx Kz_copySDKReplaceVTF ` ;
string $prefix  = `textField -q -tx Kz_copySDKPrefixVTF ` ;
string $source ;
string $target ;
if($mode==0 && size($selList)>1){
	for($i=1 ; $i<size($selList) ; $i++){
		$source  = $selList[0] ;
		$target  = $selList[$i] ;
		Kz_copySDK( $source, $target ) ;
	}
}
else if($mode==1 && size($selList)>0){
	for($i=0 ; $i<size($selList) ; $i++){
		$source  = $selList[$i] ;
		$target  = Kz_copySDK_targetDriverName ($source, $search, $replace, $prefix ) ;
		if($source != $target) { Kz_copySDK( $source, $target ) ; }
	}
}
else { warning "please select DrivenObject..." ; }
}
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
global proc Kz_copySDK_copyMode(int $mode)
{
string $layoutList[] = `columnLayout -q -ca Kz_copySDK_DrivenOptionCL` ;
if($mode==1){
	button -e -l "= Single Copy =" Kz_copySDK_SmodeButton;
	button -e -l "Multi Copy"  Kz_copySDK_MmodeButton;
	rowColumnLayout -e -vis 1 $layoutList[0] ; rowColumnLayout -e -vis 1 $layoutList[1] ;
	rowColumnLayout -e -vis 1 $layoutList[2] ; rowColumnLayout -e -vis 1 $layoutList[3] ;
	rowColumnLayout -e -vis 0 $layoutList[4] ; rowColumnLayout -e -vis 0 $layoutList[5] ;
	rowColumnLayout -e -vis 0 $layoutList[6] ; rowColumnLayout -e -vis 0 $layoutList[7] ;
}
else {
	button -e -l "Single Copy" Kz_copySDK_SmodeButton;
	button -e -l "= Multi Copy ="  Kz_copySDK_MmodeButton;
	rowColumnLayout -e -vis 0 $layoutList[0] ; rowColumnLayout -e -vis 0 $layoutList[1] ;
	rowColumnLayout -e -vis 0 $layoutList[2] ; rowColumnLayout -e -vis 0 $layoutList[3] ;
	rowColumnLayout -e -vis 1 $layoutList[4] ; rowColumnLayout -e -vis 1 $layoutList[5] ;
	rowColumnLayout -e -vis 1 $layoutList[6] ; rowColumnLayout -e -vis 1 $layoutList[7] ;
}
Kz_copySDK_getSelList ;
}
//--------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------//
global proc Kz_copySDKWindow()
{
int $winW = 500 ;
int $winH = 510 ;
if (`window -ex Kz_copySDKWindow` == true){deleteUI Kz_copySDKWindow; }
window -title "Kz_copySetDrivenKey 1.0.0"
	-w $winW
	-h $winH
	-resizeToFitChildren false
	-maximizeButton false
	-sizeable true
Kz_copySDKWindow;

columnLayout -adj false -rs 1;
	rowLayout -nc 2 -cw2 250 250 -ct2 "left" "right" -co2 5 5; // Kz_copySDKWindow()
		frameLayout -w 230 -h 250 -l " From: Object...   "
				-la "top" -li 5 -mw 10 -mh 8 -bs "etchedOut" -bv 1;
			columnLayout -adj false -rs 0;
				textScrollList -w 206
					-allowMultiSelection false
					-numberOfRows 8
					Kz_copySDK_textScrollList_from ;
				rowLayout -nc 2 -cw2 103 103 -ct2 "left" "left" -cl2 "center" "center";
					button -h 18 -w 102 -l "= Single Copy =" -rs false 
						-c "Kz_copySDK_copyMode(1);" Kz_copySDK_SmodeButton;
					button -h 18 -w 102 -l "Multi Copy"  -rs false
						-c "Kz_copySDK_copyMode(2);" Kz_copySDK_MmodeButton;
				setParent ..;
			setParent ..;
		setParent ..;
		frameLayout -w 230 -h 250 -l " To: Object...   "
				-la "top" -li 5 -mw 10 -mh 8 -bs "etchedOut" -bv 1;
			textScrollList -w 206
				-allowMultiSelection false 
				-numberOfRows 10
				Kz_copySDK_textScrollList_to ;
		setParent ..;
	setParent ..;
	rowLayout -nc 1 -cw1 470 -ct1 "left" -co1 5 ; // Kz_copySDKWindow()
		separator -st "in" -h 10 -w 470;
	setParent ..;
	rowLayout -nc 2 -cw2 250 230 -ct2 "left" "right" -co2 5 5;
		frameLayout -w 230 -h 200 -l " DrivenCopy Option   "
				-la "top" -li 5 -mw 10 -mh 5 -bs "etchedOut" -bv 0;
			columnLayout -adjustableColumn true -rowSpacing 1 ;
				rowColumnLayout -nc 3 -cw 1 200 ;
					text -l "TargetDriverName" -al "left" ;
				setParent ..;
				rowColumnLayout -nc 3 -cw 1 55 -cw 2 10 -cw 3 133 ;
					text -l "  Search" -al "left" ;
					text -l ":" -al "left" ;  
					textField -w 133 -h 20 -editable true -text "" Kz_copySDKSearchTTF ;  // Kz_copySDKWindow()
				setParent ..;
				rowColumnLayout -nc 3 -cw 1 55 -cw 2 10 -cw 3 133 ;
					text -l "  Replace" -al "left" ;
					text -l ":" -al "left" ;  
					textField -w 133 -h 20 -editable true -text "" Kz_copySDKReplaceTTF ;
				setParent ..;
				rowColumnLayout -nc 3 -cw 1 55 -cw 2 10 -cw 3 133 ;
					text -l "  Prefix" -al "left" ;
					text -l ":" -al "left" ;
					textField -w 133 -h 20 -editable true -text "" Kz_copySDKPrefixTTF ;
				setParent ..;
				rowColumnLayout -nc 1 -cw 1 200 ;
					text -l "ReversDriverKey  - Time -" -al "left" ;
				setParent ..;
				rowColumnLayout -nc 5 -cw 1 55 -cw 2 10 -cw 3 50 -cw 4 50 -cw 5 50 ;
					text -l "  Translate" -al "left" ;
					text -l ":" -al "left" ;
					checkBox -l "TX" -v 0 Kz_copySDKCB_TimeTX ;
					checkBox -l "TY" -v 0 Kz_copySDKCB_TimeTY ;
					checkBox -l "TZ" -v 0 Kz_copySDKCB_TimeTZ ;
				setParent ..;
				rowColumnLayout -nc 5 -cw 1 55 -cw 2 10 -cw 3 50 -cw 4 50 -cw 5 50 ;
					text -l "  Rotate" -al "left" ;
					text -l ":" -al "left" ;
					checkBox -l "RX" -v 0 Kz_copySDKCB_TimeRX ;
					checkBox -l "RY" -v 0 Kz_copySDKCB_TimeRY ;
					checkBox -l "RZ" -v 0 Kz_copySDKCB_TimeRZ ;
				setParent ..;
			setParent ..;
		setParent ..;
		frameLayout -w 230 -h 200 -l " ReverseValue Option   "
				-la "top" -li 5 -mw 10 -mh 5 -bs "etchedOut" -bv 0;
			columnLayout -adjustableColumn true -rowSpacing 1 "Kz_copySDK_DrivenOptionCL"; // Kz_copySDKWindow()
				rowColumnLayout -vis 1 ; text -l "" -h 16 ; setParent ..;
				rowColumnLayout -vis 1 ; text -l "" -h 20 ; setParent ..;
				rowColumnLayout -vis 1 ; text -l "" -h 20 ; setParent ..;
				rowColumnLayout -vis 1 ; text -l "" -h 20 ; setParent ..;
				rowColumnLayout -nc 3 -cw 1 200 -vis 0 "Kz_copySDK_TargetDrivenNameCL";
					text -l "TargetDrivenName" -al "left" ;
				setParent ..;
				rowColumnLayout -nc 3 -cw 1 55 -cw 2 10 -cw 3 133 -vis 0 ;
					text -l "  Search" -al "left" ;
					text -l ":" -al "left" ;  
					textField -w 133 -h 20 -editable true -text "" 
							-cc "Kz_copySDK_getSelList" Kz_copySDKSearchVTF ;
				setParent ..;
				rowColumnLayout -nc 3 -cw 1 55 -cw 2 10 -cw 3 133 -vis 0 ;
					text -l "  Replace" -al "left" ;
					text -l ":" -al "left" ;  
					textField -w 133 -h 20 -editable true -text "" 
							-cc "Kz_copySDK_getSelList" Kz_copySDKReplaceVTF ;
				setParent ..;
				rowColumnLayout -nc 3 -cw 1 55 -cw 2 10 -cw 3 133 -vis 0 ;
					text -l "  Prefix" -al "left" ;
					text -l ":" -al "left" ;
					textField -w 133 -h 20 -editable true -text "" 
							-cc "Kz_copySDK_getSelList" Kz_copySDKPrefixVTF ;
				setParent ..;
				rowColumnLayout -nc 1 -cw 1 200 ;
					text -l "ReversDrivenKey  - Valu -" -al "left" ;
				setParent ..;
				rowColumnLayout -nc 5 -cw 1 55 -cw 2 10 -cw 3 50 -cw 4 50 -cw 5 35 ;
					text -l "  Translate" -al "left" ;
					text -l ":" -al "left" ;
					checkBox -l "TX" -v 0 Kz_copySDKCB_ValuTX ;
					checkBox -l "TY" -v 0 Kz_copySDKCB_ValuTY ;
					checkBox -l "TZ" -v 0 Kz_copySDKCB_ValuTZ ;
				setParent ..;
				rowColumnLayout -nc 5 -cw 1 55 -cw 2 10 -cw 3 50 -cw 4 50 -cw 5 35 ;
					text -l "  Rotate" -al "left" ;
					text -l ":" -al "left" ;
					checkBox -l "RX" -v 0 Kz_copySDKCB_ValuRX ;
					checkBox -l "RY" -v 0 Kz_copySDKCB_ValuRY ;
					checkBox -l "RZ" -v 0 Kz_copySDKCB_ValuRZ ;
				setParent ..;
			setParent ..;
		setParent ..;
	setParent ..;
	rowLayout -nc 1 -cw1 470 -ct1 "left" -co1 5 ; 
		separator -st "in" -h 5 -w 470;
	setParent ..;
	rowLayout -nc 2 -cw2 240 240 -ct2 "left" "right" -co2 5 5 -cl2 "center" "center";
		button -w 234 -l "Copy" -c "Kz_copySDK_Run";
		button -w 234 -l "Close" -c "deleteUI Kz_copySDKWindow";
	setParent ..;
setParent ..;
showWindow Kz_copySDKWindow;
window -e -wh $winW $winH Kz_copySDKWindow;
Kz_copySDK_getSelList ;
scriptJob -e SelectionChanged "Kz_copySDK_getSelList" -p Kz_copySDKWindow ;
}
//--------------------------------------------------------------------------------------------------//
